/*
PROCEDURE: silver.load_silver
-- PURPOSE: This stored procedure is responsible for
--          performing the ETL (Extract, Transform, Load) 
--          process for various tables from the bronze schema 
--          to the silver schema.
--          The procedure also tracks the time taken for each 
--          table's load process and outputs the duration in 
--          seconds for monitoring performance.
*/
CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
    DECLARE @start_time DATETIME, @endtime DATETIME, @start_time_batch DATETIME, @endtime_batch DATETIME;

    BEGIN TRY 
        PRINT '======================';
        PRINT 'Loading silver layer';
        PRINT '======================';

        SET @start_time_batch = GETDATE();

        -- crm_cust_info Table Load
        SET @start_time = GETDATE();
        PRINT 'TRUNCATE TABLE AND DATA INSERTION FOR THE TABLE "silver.crm_cust_info"';
        TRUNCATE TABLE silver.crm_cust_info;
        INSERT INTO silver.crm_cust_info(
            cst_id,
            cst_key,
            cst_firstname,
            cst_lastname,
            cst_material_status,
            cst_gndr,
            cst_create_date
        )
        SELECT 
            cst_id,
            cst_key,
            TRIM(cst_firstname) AS cst_firstname,
            TRIM(cst_lastname) AS cst_lastname,
            CASE
                WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
                WHEN UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
                ELSE 'n/a'
            END AS cst_marital_status,  
            CASE 
                WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
                WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
                ELSE 'n/a'
            END AS cst_gndr,
            cst_create_date
        FROM (
            SELECT * ,
                   ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
            FROM bronze.crm_cust_info
        ) AS subquery
        WHERE flag_last = 1 
          AND cst_id IS NOT NULL;

        SET @endtime = GETDATE();
        PRINT 'LOAD DURATION TABLE crm_cust_info: ' + CAST(DATEDIFF(SECOND, @start_time, @endtime) AS NVARCHAR) + ' seconds';
        PRINT '======================';

        -- crm_prd_info Table Load
        SET @start_time = GETDATE();
        PRINT 'TRUNCATE TABLE AND DATA INSERTION FOR THE TABLE "silver.crm_prd_info"';
        TRUNCATE TABLE silver.crm_prd_info;
        INSERT INTO silver.crm_prd_info(
            prd_id,
            prd_key,
            cat_id,
            prd_nm,
            prd_cost,
            prd_line,
            prd_start_dt,
            prd_end_dt
        )
        SELECT 
            prd_id,
            REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id,
            SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
            prd_nm,
            ISNULL(prd_cost, 0) AS prd_cost,
            CASE 
                WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'MOUNTAIN'
                WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'ROAD'
                WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'TOURING'
                WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'OTHER SALES'
                ELSE 'n/a'
            END AS prd_line,
            CAST(prd_start_dt AS DATE) AS prd_start_dt,
            DATEADD(day, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS prd_end_dt
        FROM bronze.crm_prd_info;

        SET @endtime = GETDATE();
        PRINT 'LOAD DURATION TABLE crm_prd_info: ' + CAST(DATEDIFF(SECOND, @start_time, @endtime) AS NVARCHAR) + ' seconds';
        PRINT '======================';

        -- crm_sales_details Table Load
        SET @start_time = GETDATE();
        PRINT 'TRUNCATE TABLE AND DATA INSERTION FOR THE TABLE "silver.crm_sales_details"';
        TRUNCATE TABLE silver.crm_sales_details;
        INSERT INTO silver.crm_sales_details(
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            sls_order_dt,
            sls_ship_dt,
            sls_due_dt,
            sls_sales,
            sls_quantity,
            sls_price
        )
        SELECT 
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            CASE
                WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
                ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
            END AS sls_order_dt,
            sls_ship_dt,
            sls_due_dt,
            CASE 
                WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
                THEN sls_quantity * ABS(sls_price)
                ELSE sls_sales
            END AS sls_sales,
            sls_quantity,
            CASE 
                WHEN sls_price IS NULL OR sls_price <= 0
                THEN sls_sales / NULLIF(sls_quantity, 0)
                ELSE sls_price
            END AS sls_price
        FROM bronze.crm_sales_details;

        SET @endtime = GETDATE();
        PRINT 'LOAD DURATION TABLE crm_sales_details: ' + CAST(DATEDIFF(SECOND, @start_time, @endtime) AS NVARCHAR) + ' seconds';
        PRINT '======================';

        -- erp_cust_az12 Table Load
        SET @start_time = GETDATE();
        PRINT 'TRUNCATE TABLE AND DATA INSERTION FOR THE TABLE "silver.erp_cust_az12"';
        TRUNCATE TABLE silver.erp_cust_az12;
        INSERT INTO silver.erp_cust_az12(
            cid,
            bdate,
            gen
        )
        SELECT 
            CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid)) ELSE cid END AS cid,
            CASE WHEN bdate > GETDATE() THEN NULL ELSE bdate END AS bdate,
            CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'FEMALE'
                 WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'MALE'
                 ELSE 'n/a'
            END AS gen
        FROM bronze.erp_cust_az12;

        SET @endtime = GETDATE();
        PRINT 'LOAD DURATION TABLE erp_cust_az12: ' + CAST(DATEDIFF(SECOND, @start_time, @endtime) AS NVARCHAR) + ' seconds';
        PRINT '======================';

        -- erp_loc_a101 Table Load
        SET @start_time = GETDATE();
        PRINT 'TRUNCATE TABLE AND DATA INSERTION FOR THE TABLE "silver.erp_loc_a101"';
        TRUNCATE TABLE silver.erp_loc_a101;
        INSERT INTO silver.erp_loc_a101(cid, cntry)
        SELECT 
            REPLACE(cid, '-', '') AS cid,
            CASE 
                WHEN TRIM(cntry) = 'DE' THEN 'Germany'
                WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
                WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
                ELSE TRIM(cntry)
            END AS cntry
        FROM bronze.erp_loc_a101;

        SET @endtime = GETDATE();
        PRINT 'LOAD DURATION TABLE erp_loc_a101: ' + CAST(DATEDIFF(SECOND, @start_time, @endtime) AS NVARCHAR) + ' seconds';
        PRINT '======================';

        -- erp_px_cat_g1v2 Table Load
        SET @start_time = GETDATE();
        PRINT 'TRUNCATE TABLE AND DATA INSERTION FOR THE TABLE "silver.erp_px_cat_g1v2"';
        TRUNCATE TABLE silver.erp_px_cat_g1v2;
        INSERT INTO silver.erp_px_cat_g1v2(id, cat, subcat, maintenance)
        SELECT id, cat, subcat, maintenance
        FROM bronze.erp_px_cat_g1v2;

        SET @endtime = GETDATE();
        PRINT 'LOAD DURATION TABLE erp_px_cat_g1v2: ' + CAST(DATEDIFF(SECOND, @start_time, @endtime) AS NVARCHAR) + ' seconds';
        PRINT '======================';

        -- Batch processing time
        SET @endtime_batch = GETDATE();
        PRINT 'BATCH LOAD DURATION: ' + CAST(DATEDIFF(SECOND, @start_time_batch, @endtime_batch) AS NVARCHAR) + ' seconds';

    END TRY
    BEGIN CATCH
        PRINT 'An error occurred: ' + ERROR_MESSAGE();
    END CATCH;

END;
